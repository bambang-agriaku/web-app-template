/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthRecipesIndexRouteImport } from './routes/_auth/recipes/index'
import { Route as AuthProductsIndexRouteImport } from './routes/_auth/products/index'
import { Route as AuthProductsCreateRouteImport } from './routes/_auth/products/create'
import { Route as AuthProductsProductIdEditRouteImport } from './routes/_auth/products/$productId.edit'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRecipesIndexRoute = AuthRecipesIndexRouteImport.update({
  id: '/recipes/',
  path: '/recipes/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthProductsIndexRoute = AuthProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthProductsCreateRoute = AuthProductsCreateRouteImport.update({
  id: '/products/create',
  path: '/products/create',
  getParentRoute: () => AuthRoute,
} as any)
const AuthProductsProductIdEditRoute =
  AuthProductsProductIdEditRouteImport.update({
    id: '/products/$productId/edit',
    path: '/products/$productId/edit',
    getParentRoute: () => AuthRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/products/create': typeof AuthProductsCreateRoute
  '/products': typeof AuthProductsIndexRoute
  '/recipes': typeof AuthRecipesIndexRoute
  '/products/$productId/edit': typeof AuthProductsProductIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/products/create': typeof AuthProductsCreateRoute
  '/products': typeof AuthProductsIndexRoute
  '/recipes': typeof AuthRecipesIndexRoute
  '/products/$productId/edit': typeof AuthProductsProductIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/_auth/products/create': typeof AuthProductsCreateRoute
  '/_auth/products/': typeof AuthProductsIndexRoute
  '/_auth/recipes/': typeof AuthRecipesIndexRoute
  '/_auth/products/$productId/edit': typeof AuthProductsProductIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/products/create'
    | '/products'
    | '/recipes'
    | '/products/$productId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/products/create'
    | '/products'
    | '/recipes'
    | '/products/$productId/edit'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/login'
    | '/_auth/products/create'
    | '/_auth/products/'
    | '/_auth/recipes/'
    | '/_auth/products/$productId/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/recipes/': {
      id: '/_auth/recipes/'
      path: '/recipes'
      fullPath: '/recipes'
      preLoaderRoute: typeof AuthRecipesIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/products/': {
      id: '/_auth/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof AuthProductsIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/products/create': {
      id: '/_auth/products/create'
      path: '/products/create'
      fullPath: '/products/create'
      preLoaderRoute: typeof AuthProductsCreateRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/products/$productId/edit': {
      id: '/_auth/products/$productId/edit'
      path: '/products/$productId/edit'
      fullPath: '/products/$productId/edit'
      preLoaderRoute: typeof AuthProductsProductIdEditRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthProductsCreateRoute: typeof AuthProductsCreateRoute
  AuthProductsIndexRoute: typeof AuthProductsIndexRoute
  AuthRecipesIndexRoute: typeof AuthRecipesIndexRoute
  AuthProductsProductIdEditRoute: typeof AuthProductsProductIdEditRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthProductsCreateRoute: AuthProductsCreateRoute,
  AuthProductsIndexRoute: AuthProductsIndexRoute,
  AuthRecipesIndexRoute: AuthRecipesIndexRoute,
  AuthProductsProductIdEditRoute: AuthProductsProductIdEditRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
