/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthRecipesRouteImport } from './routes/_auth.recipes'
import { Route as AuthProductsRouteImport } from './routes/_auth.products'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRecipesRoute = AuthRecipesRouteImport.update({
  id: '/recipes',
  path: '/recipes',
  getParentRoute: () => AuthRoute,
} as any)
const AuthProductsRoute = AuthProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/products': typeof AuthProductsRoute
  '/recipes': typeof AuthRecipesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/products': typeof AuthProductsRoute
  '/recipes': typeof AuthRecipesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/_auth/products': typeof AuthProductsRoute
  '/_auth/recipes': typeof AuthRecipesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/products' | '/recipes'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/products' | '/recipes'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/login'
    | '/_auth/products'
    | '/_auth/recipes'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/recipes': {
      id: '/_auth/recipes'
      path: '/recipes'
      fullPath: '/recipes'
      preLoaderRoute: typeof AuthRecipesRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/products': {
      id: '/_auth/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof AuthProductsRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthProductsRoute: typeof AuthProductsRoute
  AuthRecipesRoute: typeof AuthRecipesRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthProductsRoute: AuthProductsRoute,
  AuthRecipesRoute: AuthRecipesRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
